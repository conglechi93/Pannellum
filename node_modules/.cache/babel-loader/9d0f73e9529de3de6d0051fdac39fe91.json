{"ast":null,"code":"var _jsxFileName = \"E:\\\\Viettel\\\\View360\\\\pannellum\\\\src\\\\pages\\\\pannellum-view\\\\components\\\\dialogs\\\\editSceneDialog.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { addScene, getCurrentScene, loadScene, getAllScenes } from \"../../libs/react-pannellum/dist\";\nimport { useFormControls } from \"../validiations/editSceneValidation\";\nimport { helperTextStyles } from \"../styles\";\nimport { defaultConfig } from \"../../views/default-config\";\nimport Button from \"@material-ui/core/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EditSceneDialog(props) {\n  _s();\n\n  var _errors$imageSource, _errors$sceneName, _errors$author;\n\n  const [state, setState] = useState({\n    scene: {\n      // use to save / retrieve config of scene\n      type: \"equirectangular\",\n      text: \"\",\n      title: \"\",\n      author: \"\",\n      imageSource: \"\",\n      config: {}\n    },\n    hotSpot: {\n      // use to save config of hotSpot\n      id: \"\",\n      sceneId: \"\",\n      pitch: \"\",\n      type: \"\",\n      yaw: \"\",\n      text: \"\",\n      URL: \"\"\n    }\n  });\n  useEffect(() => {\n    setState({\n      scene: {\n        // use to save / retrieve config of scene\n        type: \"equirectangular\",\n        text: \"\",\n        title: \"\",\n        author: \"\",\n        imageSource: \"\",\n        config: {}\n      },\n      hotSpot: {\n        // use to save config of hotSpot\n        id: \"\",\n        sceneId: \"\",\n        pitch: \"\",\n        type: \"\",\n        yaw: \"\",\n        text: \"\",\n        URL: \"\"\n      }\n    });\n    console.log(getAllScenes());\n  }, [props.open]);\n  const {\n    handleInputValue,\n    handleFormSubmit,\n    formIsValid,\n    errors\n  } = useFormControls({\n    open: props.open,\n    sceneID: state.hotSpot[\"sceneId\"]\n  });\n\n  const onEditScene = () => {\n    addScene(state.hotSpot[\"sceneId\"], state.scene[\"config\"]);\n\n    if (state.hotSpot[\"sceneId\"] === getCurrentScene()) {\n      loadScene(state.hotSpot[\"sceneId\"]);\n    }\n\n    props.close(3, \"Edit Scene Successful !\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog // this is Delete Info Dialog\n  , {\n    open: props.open,\n    onClose: () => props.close(3),\n    \"aria-labelledby\": \"form-dialog-title\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"my-delete-scene\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"form-dialog-title\",\n        children: \"Edit Scene\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"To Edit Scene, choice Scene Name.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n          id: \"scene\",\n          options: props.fullScenesInformation,\n          getOptionLabel: option => Object.keys(option)[0],\n          onChange: (event, value) => {\n            handleInputValue({\n              target: {\n                name: \"sceneName\",\n                value: value ? Object.keys(value)[0] : \"\"\n              }\n            });\n            setState(s => ({ ...s,\n              scene: value ? Object.values(value)[0] : {},\n              hotSpot: { ...s.hotSpot,\n                sceneId: value ? Object.keys(value)[0] : \"\"\n              }\n            }));\n          },\n          fullWidth: true,\n          renderInput: params => {\n            var _errors$sceneID;\n\n            return /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              label: \"Scene ID\",\n              variant: \"outlined\",\n              margin: \"dense\",\n              style: {\n                marginTop: \"15px\",\n                marginBottom: \"10px\"\n              },\n              name: \"sceneID\",\n              FormHelperTextProps: {\n                classes: helperTextStyles()\n              },\n              error: ((_errors$sceneID = errors[\"sceneID\"]) === null || _errors$sceneID === void 0 ? void 0 : _errors$sceneID.length) > 0,\n              onKeyPress: e => {\n                if (e.key === \"Enter\") {\n                  e.preventDefault();\n                }\n              },\n              onBlur: handleInputValue,\n              onChange: handleInputValue,\n              ...(errors[\"sceneID\"] && {\n                error: true,\n                helperText: errors[\"sceneID\"]\n              }),\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          disabled: state.hotSpot[\"sceneId\"] ? false : true,\n          style: {\n            marginTop: \"15px\",\n            marginBottom: \"10px\"\n          },\n          FormHelperTextProps: {\n            classes: helperTextStyles()\n          },\n          defaultValue: state.scene[\"imageSource\"],\n          variant: \"outlined\",\n          margin: \"dense\",\n          id: \"image-source\",\n          label: \"Image Source\",\n          type: \"text\",\n          autoComplete: \"off\",\n          onChange: e => {\n            handleInputValue(e);\n            setState(s => ({ ...s,\n              scene: { ...s.scene,\n                config: { ...defaultConfig,\n                  ...s.scene[\"config\"],\n                  imageSource: e.target.value || state.scene[\"imageSource\"]\n                }\n              }\n            }));\n          },\n          name: \"imageSource\",\n          error: ((_errors$imageSource = errors[\"imageSource\"]) === null || _errors$imageSource === void 0 ? void 0 : _errors$imageSource.length) > 0,\n          onBlur: handleInputValue,\n          ...(errors[\"imageSource\"] && {\n            error: true,\n            helperText: errors[\"imageSource\"]\n          }),\n          fullWidth: true\n        }, `img${state.scene[\"imageSource\"]}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          disabled: state.hotSpot[\"sceneId\"] ? false : true,\n          style: {\n            marginTop: \"15px\",\n            marginBottom: \"10px\"\n          },\n          defaultValue: state.scene[\"title\"],\n          FormHelperTextProps: {\n            classes: helperTextStyles()\n          },\n          variant: \"outlined\",\n          margin: \"dense\",\n          id: \"image-name\",\n          label: \"Scene Name\",\n          type: \"text\",\n          autoComplete: \"off\",\n          onChange: e => {\n            handleInputValue(e);\n            setState(s => ({ ...s,\n              scene: { ...s.scene,\n                config: { ...defaultConfig,\n                  ...s.scene[\"config\"],\n                  title: e.target.value\n                }\n              }\n            }));\n          },\n          name: \"sceneName\",\n          error: ((_errors$sceneName = errors[\"sceneName\"]) === null || _errors$sceneName === void 0 ? void 0 : _errors$sceneName.length) > 0,\n          onBlur: handleInputValue,\n          ...(errors[\"sceneName\"] && {\n            error: true,\n            helperText: errors[\"sceneName\"]\n          }),\n          fullWidth: true\n        }, `title${state.scene[\"title\"]}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          disabled: state.hotSpot[\"sceneId\"] ? false : true,\n          style: {\n            marginTop: \"15px\",\n            marginBottom: \"10px\"\n          },\n          FormHelperTextProps: {\n            classes: helperTextStyles()\n          },\n          defaultValue: state.scene[\"author\"],\n          variant: \"outlined\",\n          margin: \"dense\",\n          id: \"author-name\",\n          label: \"Author\",\n          type: \"text\",\n          autoComplete: \"off\",\n          onChange: e => {\n            handleInputValue(e);\n            setState(s => ({ ...s,\n              scene: { ...s.scene,\n                config: { ...defaultConfig,\n                  ...s.scene[\"config\"],\n                  author: e.target.value\n                }\n              }\n            }));\n          },\n          name: \"author\",\n          error: ((_errors$author = errors[\"author\"]) === null || _errors$author === void 0 ? void 0 : _errors$author.length) > 0,\n          onBlur: handleInputValue,\n          ...(errors[\"author\"] && {\n            error: true,\n            helperText: errors[\"author\"]\n          }),\n          fullWidth: true\n        }, `author${state.scene[\"author\"]}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => props.close(3),\n          color: \"primary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: !formIsValid(),\n          onClick: () => onEditScene(),\n          color: \"primary\",\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EditSceneDialog, \"bGo1Hb3zt1QwxOmEqg1FM1c/CL8=\", false, function () {\n  return [useFormControls];\n});\n\n_c = EditSceneDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditSceneDialog\");","map":{"version":3,"sources":["E:/Viettel/View360/pannellum/src/pages/pannellum-view/components/dialogs/editSceneDialog.tsx"],"names":["React","useEffect","useState","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","TextField","Autocomplete","addScene","getCurrentScene","loadScene","getAllScenes","useFormControls","helperTextStyles","defaultConfig","Button","EditSceneDialog","props","state","setState","scene","type","text","title","author","imageSource","config","hotSpot","id","sceneId","pitch","yaw","URL","console","log","open","handleInputValue","handleFormSubmit","formIsValid","errors","sceneID","onEditScene","close","fullScenesInformation","option","Object","keys","event","value","target","name","s","values","params","marginTop","marginBottom","classes","length","e","key","preventDefault","error","helperText"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport {\r\n  addScene,\r\n  getCurrentScene,\r\n  loadScene,\r\n  getAllScenes,\r\n} from \"../../libs/react-pannellum/dist\";\r\nimport { useFormControls } from \"../validiations/editSceneValidation\";\r\nimport { helperTextStyles } from \"../styles\";\r\nimport { defaultConfig } from \"../../views/default-config\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\ninterface Props {\r\n  scene: {\r\n    // use to save / retrieve config of scene\r\n    type: string;\r\n    text: string;\r\n    title: string;\r\n    author: string;\r\n    imageSource: string;\r\n    config: object;\r\n  };\r\n  hotSpot: {\r\n    // use to save config of hotSpot\r\n    id: string;\r\n    sceneId: string;\r\n    pitch: string;\r\n    type: string;\r\n    yaw: string;\r\n    text: string;\r\n    URL: string;\r\n  };\r\n}\r\n\r\nexport default function EditSceneDialog(props) {\r\n  const [state, setState] = useState<Props>({\r\n    scene: {\r\n      // use to save / retrieve config of scene\r\n      type: \"equirectangular\",\r\n      text: \"\",\r\n      title: \"\",\r\n      author: \"\",\r\n      imageSource: \"\",\r\n      config: {},\r\n    },\r\n    hotSpot: {\r\n      // use to save config of hotSpot\r\n      id: \"\",\r\n      sceneId: \"\",\r\n      pitch: \"\",\r\n      type: \"\",\r\n      yaw: \"\",\r\n      text: \"\",\r\n      URL: \"\",\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    setState({\r\n      scene: {\r\n        // use to save / retrieve config of scene\r\n        type: \"equirectangular\",\r\n        text: \"\",\r\n        title: \"\",\r\n        author: \"\",\r\n        imageSource: \"\",\r\n        config: {},\r\n      },\r\n      hotSpot: {\r\n        // use to save config of hotSpot\r\n        id: \"\",\r\n        sceneId: \"\",\r\n        pitch: \"\",\r\n        type: \"\",\r\n        yaw: \"\",\r\n        text: \"\",\r\n        URL: \"\",\r\n      },\r\n    });\r\n    console.log(getAllScenes());\r\n  }, [props.open]);\r\n\r\n  const { handleInputValue, handleFormSubmit, formIsValid, errors } =\r\n    useFormControls({\r\n      open: props.open,\r\n      sceneID: state.hotSpot[\"sceneId\"],\r\n    });\r\n\r\n  const onEditScene = () => {\r\n    addScene(state.hotSpot[\"sceneId\"], state.scene[\"config\"]);\r\n    if (state.hotSpot[\"sceneId\"] === getCurrentScene()) {\r\n      loadScene(state.hotSpot[\"sceneId\"]);\r\n    }\r\n    props.close(3, \"Edit Scene Successful !\");\r\n  };\r\n\r\n  return (\r\n    <Dialog // this is Delete Info Dialog\r\n      open={props.open}\r\n      onClose={() => props.close(3)}\r\n      aria-labelledby=\"form-dialog-title\"\r\n    >\r\n      <form id=\"my-delete-scene\">\r\n        <DialogTitle id=\"form-dialog-title\">Edit Scene</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To Edit Scene, choice Scene Name.\r\n          </DialogContentText>\r\n          <Autocomplete\r\n            id=\"scene\"\r\n            options={props.fullScenesInformation}\r\n            getOptionLabel={(option: object) => Object.keys(option)[0]}\r\n            onChange={(event, value: any) => {\r\n              handleInputValue({\r\n                target: {\r\n                  name: \"sceneName\",\r\n                  value: value ? Object.keys(value as object)[0] : \"\",\r\n                },\r\n              });\r\n              setState((s) => ({\r\n                ...s,\r\n                scene: value ? Object.values(value as object)[0] : {},\r\n                hotSpot: {\r\n                  ...s.hotSpot,\r\n                  sceneId: value ? Object.keys(value as object)[0] : \"\",\r\n                },\r\n              }));\r\n            }}\r\n            fullWidth\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Scene ID\"\r\n                variant=\"outlined\"\r\n                margin=\"dense\"\r\n                style={{ marginTop: \"15px\", marginBottom: \"10px\" }}\r\n                name=\"sceneID\"\r\n                FormHelperTextProps={{ classes: helperTextStyles() }}\r\n                error={errors[\"sceneID\"]?.length > 0}\r\n                onKeyPress={(e) => {\r\n                  if (e.key === \"Enter\") {\r\n                    e.preventDefault();\r\n                  }\r\n                }}\r\n                onBlur={handleInputValue}\r\n                onChange={handleInputValue}\r\n                {...(errors[\"sceneID\"] && {\r\n                  error: true,\r\n                  helperText: errors[\"sceneID\"],\r\n                })}\r\n                fullWidth\r\n              />\r\n            )}\r\n          />\r\n          <TextField\r\n            disabled={state.hotSpot[\"sceneId\"] ? false : true}\r\n            style={{ marginTop: \"15px\", marginBottom: \"10px\" }}\r\n            FormHelperTextProps={{ classes: helperTextStyles() }}\r\n            key={`img${state.scene[\"imageSource\"]}`}\r\n            defaultValue={state.scene[\"imageSource\"]}\r\n            variant=\"outlined\"\r\n            margin=\"dense\"\r\n            id=\"image-source\"\r\n            label=\"Image Source\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            onChange={(e) => {\r\n              handleInputValue(e);\r\n              setState((s) => ({\r\n                ...s,\r\n                scene: {\r\n                  ...s.scene,\r\n                  config: {\r\n                    ...defaultConfig,\r\n                    ...s.scene[\"config\"],\r\n                    imageSource: e.target.value || state.scene[\"imageSource\"],\r\n                  },\r\n                },\r\n              }));\r\n            }}\r\n            name=\"imageSource\"\r\n            error={errors[\"imageSource\"]?.length > 0}\r\n            onBlur={handleInputValue}\r\n            {...(errors[\"imageSource\"] && {\r\n              error: true,\r\n              helperText: errors[\"imageSource\"],\r\n            })}\r\n            fullWidth\r\n          />\r\n          <TextField\r\n            disabled={state.hotSpot[\"sceneId\"] ? false : true}\r\n            style={{ marginTop: \"15px\", marginBottom: \"10px\" }}\r\n            key={`title${state.scene[\"title\"]}`}\r\n            defaultValue={state.scene[\"title\"]}\r\n            FormHelperTextProps={{ classes: helperTextStyles() }}\r\n            variant=\"outlined\"\r\n            margin=\"dense\"\r\n            id=\"image-name\"\r\n            label=\"Scene Name\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            onChange={(e) => {\r\n              handleInputValue(e);\r\n              setState((s) => ({\r\n                ...s,\r\n                scene: {\r\n                  ...s.scene,\r\n                  config: {\r\n                    ...defaultConfig,\r\n                    ...s.scene[\"config\"],\r\n                    title: e.target.value,\r\n                  },\r\n                },\r\n              }));\r\n            }}\r\n            name=\"sceneName\"\r\n            error={errors[\"sceneName\"]?.length > 0}\r\n            onBlur={handleInputValue}\r\n            {...(errors[\"sceneName\"] && {\r\n              error: true,\r\n              helperText: errors[\"sceneName\"],\r\n            })}\r\n            fullWidth\r\n          />\r\n          <TextField\r\n            disabled={state.hotSpot[\"sceneId\"] ? false : true}\r\n            style={{ marginTop: \"15px\", marginBottom: \"10px\" }}\r\n            FormHelperTextProps={{ classes: helperTextStyles() }}\r\n            key={`author${state.scene[\"author\"]}`}\r\n            defaultValue={state.scene[\"author\"]}\r\n            variant=\"outlined\"\r\n            margin=\"dense\"\r\n            id=\"author-name\"\r\n            label=\"Author\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            onChange={(e) => {\r\n              handleInputValue(e);\r\n              setState((s) => ({\r\n                ...s,\r\n                scene: {\r\n                  ...s.scene,\r\n                  config: {\r\n                    ...defaultConfig,\r\n                    ...s.scene[\"config\"],\r\n                    author: e.target.value,\r\n                  },\r\n                },\r\n              }));\r\n            }}\r\n            name=\"author\"\r\n            error={errors[\"author\"]?.length > 0}\r\n            onBlur={handleInputValue}\r\n            {...(errors[\"author\"] && {\r\n              error: true,\r\n              helperText: errors[\"author\"],\r\n            })}\r\n            fullWidth\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => props.close(3)} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            disabled={!formIsValid()}\r\n            onClick={() => onEditScene()}\r\n            color=\"primary\"\r\n          >\r\n            Edit\r\n          </Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}