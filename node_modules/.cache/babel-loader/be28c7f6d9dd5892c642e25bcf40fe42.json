{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { getAllScenes } from \"../../libs/react-pannellum/dist\";\n\nconst PostContactForm = async (values, successCallback, errorCallback) => {\n  // do stuff\n  // if successful\n  if (true) successCallback();else errorCallback();\n};\n\n_c = PostContactForm;\nconst initialFormValues = {\n  sceneID: \"\",\n  imageSource: \"\",\n  sceneName: \"\",\n  author: \"\",\n  formSubmitted: false,\n  success: false\n};\nexport const useFormControls = props => {\n  _s();\n\n  const [values, setValues] = useState(initialFormValues);\n  const [errors, setErrors] = useState({});\n  const keyArray = getAllScenes() ? getAllScenes().map((value, index) => {\n    return Object.keys(value)[0];\n  }) : [];\n  useEffect(() => {\n    setValues(initialFormValues);\n    setErrors({});\n  }, [props.open]);\n\n  const validate = function () {\n    let fieldValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : values;\n    let temp = { ...errors\n    };\n\n    if (\"sceneID\" in fieldValues) {\n      temp.sceneID = fieldValues.sceneID ? \"\" : \"This field is required.\";\n\n      if (fieldValues.sceneID) {\n        temp.sceneID = (keyArray === null || keyArray === void 0 ? void 0 : keyArray.findIndex(value => value === fieldValues.sceneID)) < 0 ? \"\" : \"This Scene ID already exists\";\n      }\n    }\n\n    if (\"imageSource\" in fieldValues) {\n      temp.imageSource = fieldValues.imageSource ? \"\" : \"This field is required.\"; // if (fieldValues.imageSource) {\n      //   temp.imageSource =\n      //     /(http[s]*:\\/\\/)([a-z\\-_0-9\\/.]+)\\.([a-z.]{2,3})\\/([a-z0-9\\-_\\/._~:?#\\[\\]@!$&'()*+,;=%]*)([a-z0-9]+\\.)(jpg|jpeg|png)/i.test(\n      //       fieldValues.imageSource\n      //     )\n      //       ? \"\"\n      //       : \"Image Link is not valid\";\n      // }\n    }\n\n    if (\"sceneName\" in fieldValues) temp.sceneName = fieldValues.sceneName ? \"\" : \"This field is required.\";\n    if (\"author\" in fieldValues) temp.author = fieldValues.author ? \"\" : \"This field is required.\";\n    setErrors({ ...temp\n    });\n  };\n\n  const handleInputValue = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n    validate({\n      [name]: value\n    });\n  };\n\n  const handleSuccess = () => {\n    setValues({ ...initialFormValues,\n      formSubmitted: true,\n      success: true\n    });\n  };\n\n  const handleError = () => {\n    setValues({ ...initialFormValues,\n      formSubmitted: true,\n      success: false\n    });\n  };\n\n  const formIsValid = function () {\n    let fieldValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : values;\n    const isValid = fieldValues.sceneID && fieldValues.sceneName && fieldValues.imageSource && fieldValues.author && Object.values(errors).every(x => x === \"\");\n    return isValid;\n  };\n\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    const isValid = Object.values(errors).every(x => x === \"\") && formIsValid();\n\n    if (isValid) {\n      await PostContactForm(values, handleSuccess, handleError);\n    }\n  };\n\n  return {\n    values,\n    errors,\n    handleInputValue,\n    handleFormSubmit,\n    formIsValid\n  };\n};\n\n_s(useFormControls, \"Gy4l5EQntz2+7QNvWfxAfsVmdNE=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PostContactForm\");","map":{"version":3,"sources":["E:/Viettel/View360/pannellum/src/pages/pannellum-view/components/validiations/addSceneValidation.tsx"],"names":["useEffect","useState","getAllScenes","PostContactForm","values","successCallback","errorCallback","initialFormValues","sceneID","imageSource","sceneName","author","formSubmitted","success","useFormControls","props","setValues","errors","setErrors","keyArray","map","value","index","Object","keys","open","validate","fieldValues","temp","findIndex","handleInputValue","e","name","target","handleSuccess","handleError","formIsValid","isValid","every","x","handleFormSubmit","preventDefault"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { getAllScenes } from \"../../libs/react-pannellum/dist\";\r\n\r\nconst PostContactForm = async (\r\n  values: any,\r\n  successCallback: any,\r\n  errorCallback: any\r\n) => {\r\n  // do stuff\r\n  // if successful\r\n  if (true) successCallback();\r\n  else errorCallback();\r\n};\r\n\r\nconst initialFormValues = {\r\n  sceneID: \"\",\r\n  imageSource: \"\",\r\n  sceneName: \"\",\r\n  author: \"\",\r\n  formSubmitted: false,\r\n  success: false,\r\n};\r\n\r\nexport const useFormControls = (props) => {\r\n  const [values, setValues] = useState(initialFormValues);\r\n  const [errors, setErrors] = useState({} as any);\r\n  const keyArray = getAllScenes()\r\n    ? getAllScenes().map((value, index) => {\r\n        return Object.keys(value)[0];\r\n      })\r\n    : [];\r\n\r\n  useEffect(() => {\r\n    setValues(initialFormValues);\r\n    setErrors({});\r\n  }, [props.open]);\r\n\r\n  const validate: any = (fieldValues = values) => {\r\n    let temp: any = { ...errors };\r\n\r\n    if (\"sceneID\" in fieldValues) {\r\n      temp.sceneID = fieldValues.sceneID ? \"\" : \"This field is required.\";\r\n      if (fieldValues.sceneID) {\r\n        temp.sceneID =\r\n          keyArray?.findIndex((value) => value === fieldValues.sceneID) < 0\r\n            ? \"\"\r\n            : \"This Scene ID already exists\";\r\n      }\r\n    }\r\n\r\n    if (\"imageSource\" in fieldValues) {\r\n      temp.imageSource = fieldValues.imageSource\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n      // if (fieldValues.imageSource) {\r\n      //   temp.imageSource =\r\n      //     /(http[s]*:\\/\\/)([a-z\\-_0-9\\/.]+)\\.([a-z.]{2,3})\\/([a-z0-9\\-_\\/._~:?#\\[\\]@!$&'()*+,;=%]*)([a-z0-9]+\\.)(jpg|jpeg|png)/i.test(\r\n      //       fieldValues.imageSource\r\n      //     )\r\n      //       ? \"\"\r\n      //       : \"Image Link is not valid\";\r\n      // }\r\n    }\r\n\r\n    if (\"sceneName\" in fieldValues)\r\n      temp.sceneName = fieldValues.sceneName ? \"\" : \"This field is required.\";\r\n\r\n    if (\"author\" in fieldValues)\r\n      temp.author = fieldValues.author ? \"\" : \"This field is required.\";\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n  };\r\n\r\n  const handleInputValue = (e: any) => {\r\n    const { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n    validate({ [name]: value });\r\n  };\r\n\r\n  const handleSuccess = () => {\r\n    setValues({\r\n      ...initialFormValues,\r\n      formSubmitted: true,\r\n      success: true,\r\n    });\r\n  };\r\n\r\n  const handleError = () => {\r\n    setValues({\r\n      ...initialFormValues,\r\n      formSubmitted: true,\r\n      success: false,\r\n    });\r\n  };\r\n\r\n  const formIsValid = (fieldValues = values) => {\r\n    const isValid =\r\n      fieldValues.sceneID &&\r\n      fieldValues.sceneName &&\r\n      fieldValues.imageSource &&\r\n      fieldValues.author &&\r\n      Object.values(errors).every((x) => x === \"\");\r\n\r\n    return isValid;\r\n  };\r\n\r\n  const handleFormSubmit = async (e: any) => {\r\n    e.preventDefault();\r\n    const isValid =\r\n      Object.values(errors).every((x) => x === \"\") && formIsValid();\r\n    if (isValid) {\r\n      await PostContactForm(values, handleSuccess, handleError);\r\n    }\r\n  };\r\n\r\n  return {\r\n    values,\r\n    errors,\r\n    handleInputValue,\r\n    handleFormSubmit,\r\n    formIsValid,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}