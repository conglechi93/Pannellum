{"ast":null,"code":"var _jsxFileName = \"E:\\\\Viettel\\\\View360\\\\pannellum\\\\src\\\\pages\\\\pannellum-view\\\\components\\\\dialogs\\\\addInfoDialog.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Button from \"@material-ui/core/Button\";\nimport { addHotSpot } from \"../../libs/react-pannellum/dist\";\nimport { useFormControls } from \"../validiations/addInfoValidation\";\nimport { helperTextStyles } from \"../styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst types = [{\n  title: \"info\"\n}, {\n  title: \"scene\"\n}];\nexport default function AddInfoDialog(props) {\n  _s();\n\n  var _errors$title;\n\n  const [state, setState] = useState({\n    hotSpot: {\n      id: \"\",\n      sceneId: \"\",\n      pitch: \"\",\n      type: \"\",\n      yaw: \"\",\n      text: \"\",\n      URL: \"\"\n    },\n    isSceneType: false,\n    // use to define \"scene\" type of hotspot when \"Add\"\n    isInfoType: false // use to define \"info\" type of hotspot when \"Add\"\n\n  });\n  useEffect(() => {\n    setState(s => ({\n      hotSpot: {\n        id: \"\",\n        sceneId: \"\",\n        pitch: \"\",\n        type: \"\",\n        yaw: \"\",\n        text: \"\",\n        URL: \"\"\n      },\n      isSceneType: false,\n      // use to define \"scene\" type of hotspot when \"Add\"\n      isInfoType: false // use to define \"info\" type of hotspot when \"Add\"\n\n    }));\n  }, [props.open]);\n  const {\n    handleInputValue,\n    handleFormSubmit,\n    formIsValid,\n    errors\n  } = useFormControls({\n    open: props.open,\n    isInfo: state.isInfoType,\n    isScene: state.isSceneType\n  });\n\n  const onAddInfo = () => {\n    addHotSpot({\n      pitch: props.mouseEventToCoords[\"pitch\"],\n      yaw: props.mouseEventToCoords[\"yaw\"],\n      id: state.hotSpot[\"id\"],\n      sceneId: state.hotSpot[\"sceneId\"],\n      type: state.hotSpot[\"type\"],\n      text: state.hotSpot[\"text\"],\n      URL: state.hotSpot[\"URL\"]\n    });\n    setState(s => ({ ...s,\n      hotSpot: {\n        id: \"\",\n        sceneId: \"\",\n        pitch: \"\",\n        type: \"\",\n        yaw: \"\",\n        text: \"\",\n        URL: \"\"\n      },\n      isSceneType: false,\n      isInfoType: false\n    }));\n    props.close(3, \"Add Hotspot Successful !\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog // this is Add Info Dialog\n  , {\n    open: props.open,\n    onClose: () => props.close(0),\n    \"aria-labelledby\": \"form-dialog-title\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"my-add-info\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"form-dialog-title\",\n        children: \"Add Place Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"To add information for this place, enter a place name, then enter a description (if available).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n          id: \"type\",\n          options: types,\n          onSelect: handleInputValue,\n          getOptionLabel: option => option.title,\n          onChange: (event, value) => {\n            setState(s => ({ ...s,\n              hotSpot: { ...s.hotSpot,\n                type: value && value.title.toString()\n              },\n              isSceneType: value && value.title.toString() === \"scene\" ? true : false,\n              isInfoType: value && value.title.toString() === \"info\" ? true : false\n            }));\n          },\n          renderInput: params => {\n            var _errors$type;\n\n            return /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              style: {\n                marginTop: \"15px\",\n                marginBottom: \"10px\"\n              },\n              margin: \"dense\",\n              FormHelperTextProps: {\n                classes: helperTextStyles()\n              },\n              label: \"Type\",\n              variant: \"outlined\",\n              name: \"type\",\n              error: ((_errors$type = errors[\"type\"]) === null || _errors$type === void 0 ? void 0 : _errors$type.length) > 0,\n              onBlur: handleInputValue,\n              onChange: handleInputValue,\n              ...(errors[\"type\"] && {\n                error: true,\n                helperText: errors[\"type\"]\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          style: {\n            marginTop: \"15px\",\n            marginBottom: \"10px\"\n          },\n          variant: \"outlined\",\n          margin: \"dense\",\n          id: \"title\",\n          name: \"title\",\n          error: ((_errors$title = errors[\"title\"]) === null || _errors$title === void 0 ? void 0 : _errors$title.length) > 0,\n          label: \"Title( ID )\",\n          type: \"text\",\n          autoComplete: \"off\",\n          onBlur: handleInputValue,\n          FormHelperTextProps: {\n            classes: helperTextStyles()\n          },\n          onChange: e => {\n            handleInputValue(e);\n            setState(s => ({ ...s,\n              hotSpot: { ...s.hotSpot,\n                id: e.target.value\n              }\n            }));\n          },\n          ...(errors[\"title\"] && {\n            error: true,\n            helperText: errors[\"title\"]\n          }),\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), state.isSceneType && /*#__PURE__*/_jsxDEV(Autocomplete, {\n          id: \"scenes\",\n          options: props.fullScenesInformation,\n          onSelect: handleInputValue,\n          getOptionLabel: option => Object.keys(option)[0],\n          onChange: (event, value) => setState(s => ({ ...s,\n            hotSpot: { ...s.hotSpot,\n              sceneId: value && Object.keys(value)[0]\n            }\n          })),\n          renderInput: params => {\n            var _errors$sname;\n\n            return /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              name: \"sname\",\n              style: {\n                marginTop: \"15px\",\n                marginBottom: \"10px\"\n              },\n              FormHelperTextProps: {\n                classes: helperTextStyles()\n              },\n              label: \"Target Scene\",\n              variant: \"outlined\",\n              margin: \"dense\",\n              error: ((_errors$sname = errors[\"sname\"]) === null || _errors$sname === void 0 ? void 0 : _errors$sname.length) > 0,\n              onBlur: handleInputValue,\n              onChange: handleInputValue,\n              ...(errors[\"sname\"] && {\n                error: true,\n                helperText: errors[\"sname\"]\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          style: {\n            marginTop: \"15px\",\n            marginBottom: \"10px\"\n          },\n          variant: \"outlined\",\n          margin: \"dense\",\n          id: \"description\",\n          label: \"Description\",\n          type: \"text\",\n          autoComplete: \"off\",\n          onChange: e => setState(s => ({ ...s,\n            hotSpot: { ...s.hotSpot,\n              text: e.target.value\n            }\n          })),\n          multiline: true,\n          rows: 3,\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), state.isInfoType && /*#__PURE__*/_jsxDEV(TextField, {\n          style: {\n            marginTop: \"15px\",\n            marginBottom: \"10px\"\n          },\n          variant: \"outlined\",\n          margin: \"dense\",\n          id: \"url\",\n          label: \"URL( Optional )\",\n          type: \"text\",\n          autoComplete: \"off\",\n          onChange: e => setState(s => ({ ...s,\n            hotSpot: { ...s.hotSpot,\n              URL: e.target.value\n            }\n          })),\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => props.close(0),\n          color: \"primary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: !formIsValid(),\n          onClick: () => onAddInfo(),\n          color: \"primary\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddInfoDialog, \"yyoW1FPjz91UtHPfWz6eAfTAdHE=\", false, function () {\n  return [useFormControls];\n});\n\n_c = AddInfoDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddInfoDialog\");","map":{"version":3,"sources":["E:/Viettel/View360/pannellum/src/pages/pannellum-view/components/dialogs/addInfoDialog.tsx"],"names":["React","useEffect","useState","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","TextField","Autocomplete","Button","addHotSpot","useFormControls","helperTextStyles","types","title","AddInfoDialog","props","state","setState","hotSpot","id","sceneId","pitch","type","yaw","text","URL","isSceneType","isInfoType","s","open","handleInputValue","handleFormSubmit","formIsValid","errors","isInfo","isScene","onAddInfo","mouseEventToCoords","close","option","event","value","toString","params","marginTop","marginBottom","classes","length","error","helperText","e","target","fullScenesInformation","Object","keys"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { addHotSpot } from \"../../libs/react-pannellum/dist\";\r\nimport { useFormControls } from \"../validiations/addInfoValidation\";\r\nimport { helperTextStyles } from \"../styles\";\r\n\r\ninterface types {\r\n  title: string;\r\n}\r\n\r\nconst types: types[] = [{ title: \"info\" }, { title: \"scene\" }];\r\n\r\ninterface Props {\r\n  hotSpot: {\r\n    id: string;\r\n    sceneId: string;\r\n    pitch: string;\r\n    type: string;\r\n    yaw: string;\r\n    text: string;\r\n    URL: string;\r\n  };\r\n  isSceneType: boolean;\r\n  isInfoType: boolean;\r\n}\r\n\r\nexport default function AddInfoDialog(props) {\r\n  const [state, setState] = useState<Props>({\r\n    hotSpot: {\r\n      id: \"\",\r\n      sceneId: \"\",\r\n      pitch: \"\",\r\n      type: \"\",\r\n      yaw: \"\",\r\n      text: \"\",\r\n      URL: \"\",\r\n    },\r\n    isSceneType: false, // use to define \"scene\" type of hotspot when \"Add\"\r\n    isInfoType: false, // use to define \"info\" type of hotspot when \"Add\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    setState((s) => ({\r\n      hotSpot: {\r\n        id: \"\",\r\n        sceneId: \"\",\r\n        pitch: \"\",\r\n        type: \"\",\r\n        yaw: \"\",\r\n        text: \"\",\r\n        URL: \"\",\r\n      },\r\n      isSceneType: false, // use to define \"scene\" type of hotspot when \"Add\"\r\n      isInfoType: false, // use to define \"info\" type of hotspot when \"Add\"\r\n    }));\r\n  }, [props.open]);\r\n\r\n  const { handleInputValue, handleFormSubmit, formIsValid, errors } =\r\n    useFormControls({\r\n      open: props.open,\r\n      isInfo: state.isInfoType,\r\n      isScene: state.isSceneType,\r\n    });\r\n\r\n  const onAddInfo = () => {\r\n    addHotSpot({\r\n      pitch: props.mouseEventToCoords[\"pitch\"],\r\n      yaw: props.mouseEventToCoords[\"yaw\"],\r\n      id: state.hotSpot[\"id\"],\r\n      sceneId: state.hotSpot[\"sceneId\"],\r\n      type: state.hotSpot[\"type\"],\r\n      text: state.hotSpot[\"text\"],\r\n      URL: state.hotSpot[\"URL\"],\r\n    });\r\n    setState((s) => ({\r\n      ...s,\r\n      hotSpot: {\r\n        id: \"\",\r\n        sceneId: \"\",\r\n        pitch: \"\",\r\n        type: \"\",\r\n        yaw: \"\",\r\n        text: \"\",\r\n        URL: \"\",\r\n      },\r\n      isSceneType: false,\r\n      isInfoType: false,\r\n    }));\r\n    props.close(3, \"Add Hotspot Successful !\");\r\n  };\r\n\r\n  return (\r\n    <Dialog // this is Add Info Dialog\r\n      open={props.open}\r\n      onClose={() => props.close(0)}\r\n      aria-labelledby=\"form-dialog-title\"\r\n    >\r\n      <form id=\"my-add-info\">\r\n        <DialogTitle id=\"form-dialog-title\">Add Place Info</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To add information for this place, enter a place name, then enter a\r\n            description (if available).\r\n          </DialogContentText>\r\n          <Autocomplete\r\n            id=\"type\"\r\n            options={types}\r\n            onSelect={handleInputValue}\r\n            getOptionLabel={(option) => option.title}\r\n            onChange={(event: any, value: any) => {\r\n              setState((s) => ({\r\n                ...s,\r\n                hotSpot: {\r\n                  ...s.hotSpot,\r\n                  type: value && value.title.toString(),\r\n                },\r\n                isSceneType:\r\n                  value && value.title.toString() === \"scene\" ? true : false,\r\n                isInfoType:\r\n                  value && value.title.toString() === \"info\" ? true : false,\r\n              }));\r\n            }}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                style={{ marginTop: \"15px\", marginBottom: \"10px\" }}\r\n                margin=\"dense\"\r\n                FormHelperTextProps={{ classes: helperTextStyles() }}\r\n                label=\"Type\"\r\n                variant=\"outlined\"\r\n                name=\"type\"\r\n                error={errors[\"type\"]?.length > 0}\r\n                onBlur={handleInputValue}\r\n                onChange={handleInputValue}\r\n                {...(errors[\"type\"] && {\r\n                  error: true,\r\n                  helperText: errors[\"type\"],\r\n                })}\r\n              />\r\n            )}\r\n          />\r\n          <TextField\r\n            style={{ marginTop: \"15px\", marginBottom: \"10px\" }}\r\n            variant=\"outlined\"\r\n            margin=\"dense\"\r\n            id=\"title\"\r\n            name=\"title\"\r\n            error={errors[\"title\"]?.length > 0}\r\n            label=\"Title( ID )\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            onBlur={handleInputValue}\r\n            FormHelperTextProps={{ classes: helperTextStyles() }}\r\n            onChange={(e) => {\r\n              handleInputValue(e);\r\n              setState((s) => ({\r\n                ...s,\r\n                hotSpot: { ...s.hotSpot, id: e.target.value },\r\n              }));\r\n            }}\r\n            {...(errors[\"title\"] && {\r\n              error: true,\r\n              helperText: errors[\"title\"],\r\n            })}\r\n            fullWidth\r\n          />\r\n          {state.isSceneType && (\r\n            <Autocomplete\r\n              id=\"scenes\"\r\n              options={props.fullScenesInformation}\r\n              onSelect={handleInputValue}\r\n              getOptionLabel={(option: object) => Object.keys(option)[0]}\r\n              onChange={(event: any, value: any) =>\r\n                setState((s) => ({\r\n                  ...s,\r\n                  hotSpot: {\r\n                    ...s.hotSpot,\r\n                    sceneId: value && Object.keys(value)[0],\r\n                  },\r\n                }))\r\n              }\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  name=\"sname\"\r\n                  style={{ marginTop: \"15px\", marginBottom: \"10px\" }}\r\n                  FormHelperTextProps={{ classes: helperTextStyles() }}\r\n                  label=\"Target Scene\"\r\n                  variant=\"outlined\"\r\n                  margin=\"dense\"\r\n                  error={errors[\"sname\"]?.length > 0}\r\n                  onBlur={handleInputValue}\r\n                  onChange={handleInputValue}\r\n                  {...(errors[\"sname\"] && {\r\n                    error: true,\r\n                    helperText: errors[\"sname\"],\r\n                  })}\r\n                />\r\n              )}\r\n            />\r\n          )}\r\n          <TextField\r\n            style={{ marginTop: \"15px\", marginBottom: \"10px\" }}\r\n            variant=\"outlined\"\r\n            margin=\"dense\"\r\n            id=\"description\"\r\n            label=\"Description\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            onChange={(e) =>\r\n              setState((s) => ({\r\n                ...s,\r\n                hotSpot: { ...s.hotSpot, text: e.target.value },\r\n              }))\r\n            }\r\n            multiline\r\n            rows={3}\r\n            fullWidth\r\n          />\r\n          {state.isInfoType && (\r\n            <TextField\r\n              style={{ marginTop: \"15px\", marginBottom: \"10px\" }}\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              id=\"url\"\r\n              label=\"URL( Optional )\"\r\n              type=\"text\"\r\n              autoComplete=\"off\"\r\n              onChange={(e) =>\r\n                setState((s) => ({\r\n                  ...s,\r\n                  hotSpot: { ...s.hotSpot, URL: e.target.value },\r\n                }))\r\n              }\r\n              fullWidth\r\n            />\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => props.close(0)} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            disabled={!formIsValid()}\r\n            onClick={() => onAddInfo()}\r\n            color=\"primary\"\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}