{"ast":null,"code":"var _jsxFileName = \"E:\\\\Viettel\\\\View360\\\\pannellum\\\\src\\\\pages\\\\pannellum-view\\\\components\\\\dialogs\\\\deleteInfoDialog.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { removeHotSpot } from \"../../libs/react-pannellum/dist\";\nimport Button from \"@material-ui/core/Button\";\nimport { useFormControls } from \"../validiations/deleteInfoValidation\";\nimport { helperTextStyles } from \"../styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DeleteInfoDialog(props) {\n  _s();\n\n  const [state, setState] = useState({\n    scene: {\n      // use to save / retrieve config of scene\n      sceneId: \"\",\n      config: {\n        type: \"equirectangular\",\n        text: \"\",\n        title: \"\",\n        author: \"\",\n        imageSource: \"\"\n      }\n    },\n    hotSpot: {\n      // use to save config of hotSpot\n      id: \"\",\n      sceneId: \"\",\n      pitch: \"\",\n      type: \"\",\n      yaw: \"\",\n      text: \"\",\n      URL: \"\"\n    }\n  });\n  const {\n    handleInputValue,\n    handleFormSubmit,\n    formIsValid,\n    errors\n  } = useFormControls({\n    open: props.open,\n    sceneID: state.hotSpot[\"sceneId\"]\n  });\n\n  const onDeleteInfo = () => {\n    removeHotSpot(state.hotSpot[\"id\"], state.hotSpot[\"sceneId\"]);\n    props.close(3, \"Delete Hotspot Successful !\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog // this is Delete Info Dialog\n  , {\n    open: props.open,\n    onClose: () => props.close(3),\n    \"aria-labelledby\": \"form-dialog-title\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"my-delete-info\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"form-dialog-title\",\n        children: \"Delete Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"To delete info, first choice scene name, then choice hotspot.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n          id: \"scenes\",\n          options: props.fullScenesInformation,\n          getOptionLabel: option => Object.keys(option)[0],\n          onChange: (event, value) => {\n            handleInputValue({\n              target: {\n                name: \"sceneName\",\n                value: value ? Object.keys(value)[0] : \"\"\n              }\n            });\n            setState(s => ({ ...s,\n              scene: value ? Object.values(value)[0] : {},\n              hotSpot: { ...s.hotSpot,\n                sceneId: value ? Object.keys(value)[0] : \"\"\n              }\n            }));\n          },\n          renderInput: params => {\n            var _errors$sceneName;\n\n            return /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              label: \"Scene Name\",\n              variant: \"outlined\",\n              margin: \"dense\",\n              style: {\n                marginTop: \"15px\",\n                marginBottom: \"10px\"\n              },\n              name: \"sceneName\",\n              FormHelperTextProps: {\n                classes: helperTextStyles()\n              },\n              error: ((_errors$sceneName = errors[\"sceneName\"]) === null || _errors$sceneName === void 0 ? void 0 : _errors$sceneName.length) > 0,\n              onKeyPress: e => {\n                if (e.key === \"Enter\") {\n                  e.preventDefault();\n                }\n              },\n              onBlur: handleInputValue,\n              onChange: handleInputValue,\n              ...(errors[\"sceneName\"] && {\n                error: true,\n                helperText: errors[\"sceneName\"]\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n          disabled: state.scene[\"hotSpots\"] ? false : true,\n          id: \"hotspot\",\n          options: state.scene[\"hotSpots\"] ? state.scene[\"hotSpots\"] : [],\n          getOptionLabel: option => option.id,\n          onChange: (event, value) => {\n            handleInputValue({\n              target: {\n                name: \"hotSpotName\",\n                value: value ? Object.keys(value)[0] : \"\"\n              }\n            });\n            setState(s => ({ ...s,\n              hotSpot: { ...s.hotSpot,\n                id: value ? value.id.toString() : \"\"\n              }\n            }));\n          },\n          renderInput: params => {\n            var _errors$hotSpotName;\n\n            return /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              style: {\n                marginTop: \"15px\",\n                marginBottom: \"10px\"\n              },\n              label: \"Hotspot Name\",\n              variant: \"outlined\",\n              name: \"hotSpotName\",\n              error: ((_errors$hotSpotName = errors[\"hotSpotName\"]) === null || _errors$hotSpotName === void 0 ? void 0 : _errors$hotSpotName.length) > 0,\n              onKeyPress: e => {\n                if (e.key === \"Enter\") {\n                  e.preventDefault();\n                }\n              },\n              onBlur: handleInputValue,\n              onChange: handleInputValue,\n              FormHelperTextProps: {\n                classes: helperTextStyles()\n              },\n              ...(errors[\"hotSpotName\"] && {\n                error: true,\n                helperText: errors[\"hotSpotName\"]\n              }),\n              margin: \"dense\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => props.close(3),\n          color: \"primary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: !formIsValid(),\n          onClick: () => onDeleteInfo(),\n          color: \"primary\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DeleteInfoDialog, \"4p6Nrmx4arfqOy7O6A48IPa2cdU=\", false, function () {\n  return [useFormControls];\n});\n\n_c = DeleteInfoDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeleteInfoDialog\");","map":{"version":3,"sources":["E:/Viettel/View360/pannellum/src/pages/pannellum-view/components/dialogs/deleteInfoDialog.tsx"],"names":["React","useState","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","TextField","Autocomplete","removeHotSpot","Button","useFormControls","helperTextStyles","DeleteInfoDialog","props","state","setState","scene","sceneId","config","type","text","title","author","imageSource","hotSpot","id","pitch","yaw","URL","handleInputValue","handleFormSubmit","formIsValid","errors","open","sceneID","onDeleteInfo","close","fullScenesInformation","option","Object","keys","event","value","target","name","s","values","params","marginTop","marginBottom","classes","length","e","key","preventDefault","error","helperText","toString"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { removeHotSpot } from \"../../libs/react-pannellum/dist\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useFormControls } from \"../validiations/deleteInfoValidation\";\r\nimport { helperTextStyles } from \"../styles\";\r\n\r\ninterface Props {\r\n  scene: {\r\n    // use to save / retrieve config of scene\r\n    sceneId: string;\r\n    config: {\r\n      type: string;\r\n      text: string;\r\n      title: string;\r\n      author: string;\r\n      imageSource: string;\r\n    };\r\n  };\r\n  hotSpot: {\r\n    // use to save config of hotSpot\r\n    id: string;\r\n    sceneId: string;\r\n    pitch: string;\r\n    type: string;\r\n    yaw: string;\r\n    text: string;\r\n    URL: string;\r\n  };\r\n}\r\n\r\nexport default function DeleteInfoDialog(props) {\r\n  const [state, setState] = useState<Props>({\r\n    scene: {\r\n      // use to save / retrieve config of scene\r\n      sceneId: \"\",\r\n      config: {\r\n        type: \"equirectangular\",\r\n        text: \"\",\r\n        title: \"\",\r\n        author: \"\",\r\n        imageSource: \"\",\r\n      },\r\n    },\r\n    hotSpot: {\r\n      // use to save config of hotSpot\r\n      id: \"\",\r\n      sceneId: \"\",\r\n      pitch: \"\",\r\n      type: \"\",\r\n      yaw: \"\",\r\n      text: \"\",\r\n      URL: \"\",\r\n    },\r\n  });\r\n\r\n  const { handleInputValue, handleFormSubmit, formIsValid, errors } =\r\n    useFormControls({\r\n      open: props.open,\r\n      sceneID: state.hotSpot[\"sceneId\"],\r\n    });\r\n\r\n  const onDeleteInfo = () => {\r\n    removeHotSpot(state.hotSpot[\"id\"], state.hotSpot[\"sceneId\"]);\r\n    props.close(3, \"Delete Hotspot Successful !\");\r\n  };\r\n\r\n  return (\r\n    <Dialog // this is Delete Info Dialog\r\n      open={props.open}\r\n      onClose={() => props.close(3)}\r\n      aria-labelledby=\"form-dialog-title\"\r\n    >\r\n      <form id=\"my-delete-info\">\r\n        <DialogTitle id=\"form-dialog-title\">Delete Info</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To delete info, first choice scene name, then choice hotspot.\r\n          </DialogContentText>\r\n          <Autocomplete\r\n            id=\"scenes\"\r\n            options={props.fullScenesInformation}\r\n            getOptionLabel={(option: object) => Object.keys(option)[0]}\r\n            onChange={(event: any, value: any) => {\r\n              handleInputValue({\r\n                target: {\r\n                  name: \"sceneName\",\r\n                  value: value ? Object.keys(value as object)[0] : \"\",\r\n                },\r\n              });\r\n              setState((s) => ({\r\n                ...s,\r\n                scene: value ? Object.values(value as object)[0] : {},\r\n                hotSpot: {\r\n                  ...s.hotSpot,\r\n                  sceneId: value ? Object.keys(value as object)[0] : \"\",\r\n                },\r\n              }));\r\n            }}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Scene Name\"\r\n                variant=\"outlined\"\r\n                margin=\"dense\"\r\n                style={{ marginTop: \"15px\", marginBottom: \"10px\" }}\r\n                name=\"sceneName\"\r\n                FormHelperTextProps={{ classes: helperTextStyles() }}\r\n                error={errors[\"sceneName\"]?.length > 0}\r\n                onKeyPress={(e) => {\r\n                  if (e.key === \"Enter\") {\r\n                    e.preventDefault();\r\n                  }\r\n                }}\r\n                onBlur={handleInputValue}\r\n                onChange={handleInputValue}\r\n                {...(errors[\"sceneName\"] && {\r\n                  error: true,\r\n                  helperText: errors[\"sceneName\"],\r\n                })}\r\n              />\r\n            )}\r\n          />\r\n          <Autocomplete\r\n            disabled={state.scene[\"hotSpots\"] ? false : true}\r\n            id=\"hotspot\"\r\n            options={state.scene[\"hotSpots\"] ? state.scene[\"hotSpots\"] : []}\r\n            getOptionLabel={(option) => option.id}\r\n            onChange={(event: any, value: any) => {\r\n              handleInputValue({\r\n                target: {\r\n                  name: \"hotSpotName\",\r\n                  value: value ? Object.keys(value as object)[0] : \"\",\r\n                },\r\n              });\r\n              setState((s) => ({\r\n                ...s,\r\n                hotSpot: {\r\n                  ...s.hotSpot,\r\n                  id: value ? value.id.toString() : \"\",\r\n                },\r\n              }));\r\n            }}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                style={{ marginTop: \"15px\", marginBottom: \"10px\" }}\r\n                label=\"Hotspot Name\"\r\n                variant=\"outlined\"\r\n                name=\"hotSpotName\"\r\n                error={errors[\"hotSpotName\"]?.length > 0}\r\n                onKeyPress={(e) => {\r\n                  if (e.key === \"Enter\") {\r\n                    e.preventDefault();\r\n                  }\r\n                }}\r\n                onBlur={handleInputValue}\r\n                onChange={handleInputValue}\r\n                FormHelperTextProps={{ classes: helperTextStyles() }}\r\n                {...(errors[\"hotSpotName\"] && {\r\n                  error: true,\r\n                  helperText: errors[\"hotSpotName\"],\r\n                })}\r\n                margin=\"dense\"\r\n              />\r\n            )}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => props.close(3)} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            disabled={!formIsValid()}\r\n            onClick={() => onDeleteInfo()}\r\n            color=\"primary\"\r\n          >\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}