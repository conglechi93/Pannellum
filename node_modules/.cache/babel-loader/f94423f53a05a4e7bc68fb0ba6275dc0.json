{"ast":null,"code":"var _jsxFileName = \"E:\\\\Viettel\\\\View360\\\\pannellum\\\\src\\\\pages\\\\pannellum-view\\\\components\\\\dialogs\\\\addSceneDialog.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { addScene } from \"../../libs/react-pannellum/dist\";\nimport { defaultConfig } from \"../../views/default-config\";\nimport { useFormControls } from \"../validiations/addSceneValidation\";\nimport { helperTextStyles } from \"../styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddSceneDialog(props) {\n  _s();\n\n  var _errors$sceneID, _errors$imageSource, _errors$sceneName, _errors$author;\n\n  const [state, setState] = useState({\n    scene: {\n      // use to save / retrieve config of scene\n      sceneId: \"\",\n      config: {\n        type: \"equirectangular\",\n        text: \"\",\n        title: \"\",\n        author: \"\",\n        imageSource: \"\",\n        hotSpots: []\n      }\n    },\n    fullScenesInformation: []\n  });\n  useEffect(() => {\n    setState(s => ({\n      scene: {\n        // use to save / retrieve config of scene\n        sceneId: \"\",\n        config: {\n          type: \"equirectangular\",\n          text: \"\",\n          title: \"\",\n          author: \"\",\n          imageSource: \"\",\n          hotSpots: []\n        }\n      },\n      fullScenesInformation: []\n    }));\n  }, [props.open]);\n  const {\n    handleInputValue,\n    handleFormSubmit,\n    formIsValid,\n    errors\n  } = useFormControls({\n    open: props.open\n  });\n\n  const addSceneSuccess = () => {\n    setState(s => ({ ...s,\n      snackbarAction: {\n        isOpen: true,\n        message: \"Add Scene Successful !\",\n        type: \"success\"\n      }\n    }));\n  };\n\n  const onAddScene = () => {\n    var _props$fullScenesInfo;\n\n    if (!((_props$fullScenesInfo = props.fullScenesInformation) !== null && _props$fullScenesInfo !== void 0 && _props$fullScenesInfo.length)) {\n      setState(s => ({ ...s,\n        fullScenesInformation: [{\n          [s.scene[\"sceneId\"]]: { ...s.scene[\"config\"]\n          }\n        }]\n      }));\n      props.close(1, { ...state,\n        fullScenesInformation: [{\n          [state.scene[\"sceneId\"]]: { ...state.scene[\"config\"]\n          }\n        }]\n      });\n    } else {\n      addScene(state.scene.sceneId, state.scene[\"config\"], addSceneSuccess);\n      props.close(3, \"Add Scene Successful !\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog // this is Add Scene Dialog\n  , {\n    open: props.open,\n    onClose: () => props.close(3),\n    \"aria-labelledby\": \"form-dialog-title\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"my-add-scene\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"form-dialog-title\",\n        children: \"Add Scene\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"To add scene, enter a scene id, scene name, then enter the source of scene ( link ).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          style: {\n            marginTop: \"15px\",\n            marginBottom: \"10px\"\n          },\n          FormHelperTextProps: {\n            classes: helperTextStyles()\n          },\n          autoFocus: true,\n          variant: \"outlined\",\n          margin: \"dense\",\n          id: \"scene-id\",\n          label: \"Scene ID\",\n          type: \"text\",\n          autoComplete: \"off\",\n          onChange: e => {\n            handleInputValue(e);\n            setState(s => ({ ...s,\n              scene: { ...s.scene,\n                sceneId: e.target.value\n              }\n            }));\n          },\n          name: \"sceneID\",\n          error: ((_errors$sceneID = errors[\"sceneID\"]) === null || _errors$sceneID === void 0 ? void 0 : _errors$sceneID.length) > 0,\n          onBlur: handleInputValue,\n          ...(errors[\"sceneID\"] && {\n            error: true,\n            helperText: errors[\"sceneID\"]\n          }),\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          style: {\n            marginTop: \"15px\",\n            marginBottom: \"10px\"\n          },\n          FormHelperTextProps: {\n            classes: helperTextStyles()\n          },\n          variant: \"outlined\",\n          margin: \"dense\",\n          id: \"image-source\",\n          label: \"Image Source\",\n          type: \"text\",\n          autoComplete: \"off\",\n          onChange: e => {\n            handleInputValue(e);\n            setState(s => ({ ...s,\n              scene: { ...s.scene,\n                config: { ...defaultConfig,\n                  ...s.scene[\"config\"],\n                  imageSource: e.target.value\n                }\n              }\n            }));\n          },\n          name: \"imageSource\",\n          error: ((_errors$imageSource = errors[\"imageSource\"]) === null || _errors$imageSource === void 0 ? void 0 : _errors$imageSource.length) > 0,\n          onBlur: handleInputValue,\n          ...(errors[\"imageSource\"] && {\n            error: true,\n            helperText: errors[\"imageSource\"]\n          }),\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          style: {\n            marginTop: \"15px\",\n            marginBottom: \"10px\"\n          },\n          FormHelperTextProps: {\n            classes: helperTextStyles()\n          },\n          variant: \"outlined\",\n          margin: \"dense\",\n          id: \"image-name\",\n          label: \"Scene Name\",\n          type: \"text\",\n          autoComplete: \"off\",\n          onChange: e => {\n            handleInputValue(e);\n            setState(s => ({ ...s,\n              scene: { ...s.scene,\n                config: { ...defaultConfig,\n                  ...s.scene[\"config\"],\n                  title: e.target.value\n                }\n              }\n            }));\n          },\n          name: \"sceneName\",\n          error: ((_errors$sceneName = errors[\"sceneName\"]) === null || _errors$sceneName === void 0 ? void 0 : _errors$sceneName.length) > 0,\n          onBlur: handleInputValue,\n          ...(errors[\"sceneName\"] && {\n            error: true,\n            helperText: errors[\"sceneName\"]\n          }),\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          style: {\n            marginTop: \"15px\",\n            marginBottom: \"10px\"\n          },\n          FormHelperTextProps: {\n            classes: helperTextStyles()\n          },\n          variant: \"outlined\",\n          margin: \"dense\",\n          id: \"author-name\",\n          label: \"Author\",\n          type: \"text\",\n          autoComplete: \"off\",\n          onChange: e => {\n            handleInputValue(e);\n            setState(s => ({ ...s,\n              scene: { ...s.scene,\n                config: { ...defaultConfig,\n                  ...s.scene[\"config\"],\n                  author: e.target.value\n                }\n              }\n            }));\n          },\n          name: \"author\",\n          error: ((_errors$author = errors[\"author\"]) === null || _errors$author === void 0 ? void 0 : _errors$author.length) > 0,\n          onBlur: handleInputValue,\n          ...(errors[\"author\"] && {\n            error: true,\n            helperText: errors[\"author\"]\n          }),\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => props.close(3),\n          color: \"primary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: !formIsValid(),\n          onClick: () => onAddScene(),\n          color: \"primary\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddSceneDialog, \"a9taEEquN0CiCkqICVLhj5/2Kbw=\", false, function () {\n  return [useFormControls];\n});\n\n_c = AddSceneDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddSceneDialog\");","map":{"version":3,"sources":["E:/Viettel/View360/pannellum/src/pages/pannellum-view/components/dialogs/addSceneDialog.tsx"],"names":["React","useEffect","useState","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","TextField","Button","addScene","defaultConfig","useFormControls","helperTextStyles","AddSceneDialog","props","state","setState","scene","sceneId","config","type","text","title","author","imageSource","hotSpots","fullScenesInformation","s","open","handleInputValue","handleFormSubmit","formIsValid","errors","addSceneSuccess","snackbarAction","isOpen","message","onAddScene","length","close","marginTop","marginBottom","classes","e","target","value","error","helperText"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { addScene } from \"../../libs/react-pannellum/dist\";\r\nimport { defaultConfig } from \"../../views/default-config\";\r\nimport { useFormControls } from \"../validiations/addSceneValidation\";\r\nimport { helperTextStyles } from \"../styles\";\r\n\r\ninterface Props {\r\n  scene: {\r\n    // use to save / retrieve config of scene\r\n    sceneId: string;\r\n    config: {\r\n      type: string;\r\n      text: string;\r\n      title: string;\r\n      author: string;\r\n      imageSource: string;\r\n      hotSpots: Array<Object>;\r\n    };\r\n  };\r\n  fullScenesInformation: Array<any>;\r\n}\r\n\r\nexport default function AddSceneDialog(props) {\r\n  const [state, setState] = useState<Props>({\r\n    scene: {\r\n      // use to save / retrieve config of scene\r\n      sceneId: \"\",\r\n      config: {\r\n        type: \"equirectangular\",\r\n        text: \"\",\r\n        title: \"\",\r\n        author: \"\",\r\n        imageSource: \"\",\r\n        hotSpots: [],\r\n      },\r\n    },\r\n    fullScenesInformation: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    setState((s) => ({\r\n      scene: {\r\n        // use to save / retrieve config of scene\r\n        sceneId: \"\",\r\n        config: {\r\n          type: \"equirectangular\",\r\n          text: \"\",\r\n          title: \"\",\r\n          author: \"\",\r\n          imageSource: \"\",\r\n          hotSpots: [],\r\n        },\r\n      },\r\n      fullScenesInformation: [],\r\n    }));\r\n  }, [props.open]);\r\n\r\n  const { handleInputValue, handleFormSubmit, formIsValid, errors } =\r\n    useFormControls({\r\n      open: props.open,\r\n    });\r\n\r\n  const addSceneSuccess = () => {\r\n    setState((s) => ({\r\n      ...s,\r\n      snackbarAction: {\r\n        isOpen: true,\r\n        message: \"Add Scene Successful !\",\r\n        type: \"success\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  const onAddScene = () => {\r\n    if (!props.fullScenesInformation?.length) {\r\n      setState((s) => ({\r\n        ...s,\r\n        fullScenesInformation: [\r\n          {\r\n            [s.scene[\"sceneId\"]]: {\r\n              ...s.scene[\"config\"],\r\n            },\r\n          },\r\n        ],\r\n      }));\r\n      props.close(1, {\r\n        ...state,\r\n        fullScenesInformation: [\r\n          {\r\n            [state.scene[\"sceneId\"]]: {\r\n              ...state.scene[\"config\"],\r\n            },\r\n          },\r\n        ],\r\n      });\r\n    } else {\r\n      addScene(state.scene.sceneId, state.scene[\"config\"], addSceneSuccess);\r\n      props.close(3, \"Add Scene Successful !\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog // this is Add Scene Dialog\r\n      open={props.open}\r\n      onClose={() => props.close(3)}\r\n      aria-labelledby=\"form-dialog-title\"\r\n    >\r\n      <form id=\"my-add-scene\">\r\n        <DialogTitle id=\"form-dialog-title\">Add Scene</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To add scene, enter a scene id, scene name, then enter the source of\r\n            scene ( link ).\r\n          </DialogContentText>\r\n          <TextField\r\n            style={{ marginTop: \"15px\", marginBottom: \"10px\" }}\r\n            FormHelperTextProps={{ classes: helperTextStyles() }}\r\n            autoFocus\r\n            variant=\"outlined\"\r\n            margin=\"dense\"\r\n            id=\"scene-id\"\r\n            label=\"Scene ID\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            onChange={(e) => {\r\n              handleInputValue(e);\r\n              setState((s) => ({\r\n                ...s,\r\n                scene: {\r\n                  ...s.scene,\r\n                  sceneId: e.target.value,\r\n                },\r\n              }));\r\n            }}\r\n            name=\"sceneID\"\r\n            error={errors[\"sceneID\"]?.length > 0}\r\n            onBlur={handleInputValue}\r\n            {...(errors[\"sceneID\"] && {\r\n              error: true,\r\n              helperText: errors[\"sceneID\"],\r\n            })}\r\n            fullWidth\r\n          />\r\n          <TextField\r\n            style={{ marginTop: \"15px\", marginBottom: \"10px\" }}\r\n            FormHelperTextProps={{ classes: helperTextStyles() }}\r\n            variant=\"outlined\"\r\n            margin=\"dense\"\r\n            id=\"image-source\"\r\n            label=\"Image Source\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            onChange={(e) => {\r\n              handleInputValue(e);\r\n              setState((s) => ({\r\n                ...s,\r\n                scene: {\r\n                  ...s.scene,\r\n                  config: {\r\n                    ...defaultConfig,\r\n                    ...s.scene[\"config\"],\r\n                    imageSource: e.target.value,\r\n                  },\r\n                },\r\n              }));\r\n            }}\r\n            name=\"imageSource\"\r\n            error={errors[\"imageSource\"]?.length > 0}\r\n            onBlur={handleInputValue}\r\n            {...(errors[\"imageSource\"] && {\r\n              error: true,\r\n              helperText: errors[\"imageSource\"],\r\n            })}\r\n            fullWidth\r\n          />\r\n          <TextField\r\n            style={{ marginTop: \"15px\", marginBottom: \"10px\" }}\r\n            FormHelperTextProps={{ classes: helperTextStyles() }}\r\n            variant=\"outlined\"\r\n            margin=\"dense\"\r\n            id=\"image-name\"\r\n            label=\"Scene Name\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            onChange={(e) => {\r\n              handleInputValue(e);\r\n              setState((s) => ({\r\n                ...s,\r\n                scene: {\r\n                  ...s.scene,\r\n                  config: {\r\n                    ...defaultConfig,\r\n                    ...s.scene[\"config\"],\r\n                    title: e.target.value,\r\n                  },\r\n                },\r\n              }));\r\n            }}\r\n            name=\"sceneName\"\r\n            error={errors[\"sceneName\"]?.length > 0}\r\n            onBlur={handleInputValue}\r\n            {...(errors[\"sceneName\"] && {\r\n              error: true,\r\n              helperText: errors[\"sceneName\"],\r\n            })}\r\n            fullWidth\r\n          />\r\n          <TextField\r\n            style={{ marginTop: \"15px\", marginBottom: \"10px\" }}\r\n            FormHelperTextProps={{ classes: helperTextStyles() }}\r\n            variant=\"outlined\"\r\n            margin=\"dense\"\r\n            id=\"author-name\"\r\n            label=\"Author\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            onChange={(e) => {\r\n              handleInputValue(e);\r\n              setState((s) => ({\r\n                ...s,\r\n                scene: {\r\n                  ...s.scene,\r\n                  config: {\r\n                    ...defaultConfig,\r\n                    ...s.scene[\"config\"],\r\n                    author: e.target.value,\r\n                  },\r\n                },\r\n              }));\r\n            }}\r\n            name=\"author\"\r\n            error={errors[\"author\"]?.length > 0}\r\n            onBlur={handleInputValue}\r\n            {...(errors[\"author\"] && {\r\n              error: true,\r\n              helperText: errors[\"author\"],\r\n            })}\r\n            fullWidth\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => props.close(3)} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            disabled={!formIsValid()}\r\n            onClick={() => onAddScene()}\r\n            color=\"primary\"\r\n          >\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}