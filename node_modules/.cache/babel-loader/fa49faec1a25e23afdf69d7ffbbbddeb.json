{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { getCurrentScene } from \"../../libs/react-pannellum/dist\";\n\nconst PostContactForm = async (values, successCallback, errorCallback) => {\n  // do stuff\n  // if successful\n  if (true) successCallback();else errorCallback();\n};\n\n_c = PostContactForm;\nconst initialFormValues = {\n  sceneName: \"\",\n  formSubmitted: false,\n  success: false\n};\nexport const useFormControls = props => {\n  _s();\n\n  var _getCurrentScene;\n\n  const [values, setValues] = useState(initialFormValues);\n  const [errors, setErrors] = useState({});\n  const currentScene = (_getCurrentScene = getCurrentScene()) === null || _getCurrentScene === void 0 ? void 0 : _getCurrentScene.toString();\n  useEffect(() => {\n    setValues(initialFormValues);\n    setErrors({});\n  }, [props.open]);\n\n  const validate = function () {\n    let fieldValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : values;\n    let temp = { ...errors\n    };\n\n    if (\"sceneName\" in fieldValues) {\n      temp.sceneName = fieldValues.sceneName ? \"\" : \"This field is required.\";\n\n      if (fieldValues.sceneName) {\n        temp.sceneName = fieldValues.sceneName.toString() !== currentScene ? \"\" : \"Can not delete this scene\";\n      }\n    }\n\n    setErrors({ ...temp\n    });\n  };\n\n  const handleInputValue = e => {\n    console.log(e.target);\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n    validate({\n      [name]: value\n    });\n  };\n\n  const handleSuccess = () => {\n    setValues({ ...initialFormValues,\n      formSubmitted: true,\n      success: true\n    });\n  };\n\n  const handleError = () => {\n    setValues({ ...initialFormValues,\n      formSubmitted: true,\n      success: false\n    });\n  };\n\n  const formIsValid = function () {\n    let fieldValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : values;\n    const isValid = fieldValues.sceneName && Object.values(errors).every(x => x === \"\");\n    return isValid;\n  };\n\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    const isValid = Object.values(errors).every(x => x === \"\") && formIsValid();\n\n    if (isValid) {\n      await PostContactForm(values, handleSuccess, handleError);\n    }\n  };\n\n  return {\n    values,\n    errors,\n    handleInputValue,\n    handleFormSubmit,\n    formIsValid\n  };\n};\n\n_s(useFormControls, \"Gy4l5EQntz2+7QNvWfxAfsVmdNE=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PostContactForm\");","map":{"version":3,"sources":["E:/project742022/react/src/pages/pannellum-view/components/validiations/deleteSceneValidation.tsx"],"names":["useEffect","useState","getCurrentScene","PostContactForm","values","successCallback","errorCallback","initialFormValues","sceneName","formSubmitted","success","useFormControls","props","setValues","errors","setErrors","currentScene","toString","open","validate","fieldValues","temp","handleInputValue","e","console","log","target","name","value","handleSuccess","handleError","formIsValid","isValid","Object","every","x","handleFormSubmit","preventDefault"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { getCurrentScene } from \"../../libs/react-pannellum/dist\";\r\n\r\nconst PostContactForm = async (\r\n  values: any,\r\n  successCallback: any,\r\n  errorCallback: any\r\n) => {\r\n  // do stuff\r\n  // if successful\r\n  if (true) successCallback();\r\n  else errorCallback();\r\n};\r\n\r\nconst initialFormValues = {\r\n  sceneName: \"\",\r\n  formSubmitted: false,\r\n  success: false,\r\n};\r\n\r\nexport const useFormControls = (props) => {\r\n  const [values, setValues] = useState(initialFormValues);\r\n  const [errors, setErrors] = useState({} as any);\r\n  const currentScene: string = getCurrentScene()?.toString();\r\n\r\n  useEffect(() => {\r\n    setValues(initialFormValues);\r\n    setErrors({});\r\n  }, [props.open]);\r\n\r\n  const validate: any = (fieldValues = values) => {\r\n    let temp: any = { ...errors };\r\n\r\n    if (\"sceneName\" in fieldValues) {\r\n      temp.sceneName = fieldValues.sceneName ? \"\" : \"This field is required.\";\r\n      if (fieldValues.sceneName) {\r\n        temp.sceneName =\r\n          fieldValues.sceneName.toString() !== currentScene\r\n            ? \"\"\r\n            : \"Can not delete this scene\";\r\n      }\r\n    }\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n  };\r\n\r\n  const handleInputValue = (e: any) => {\r\n    console.log(e.target);\r\n    const { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n    validate({ [name]: value });\r\n  };\r\n\r\n  const handleSuccess = () => {\r\n    setValues({\r\n      ...initialFormValues,\r\n      formSubmitted: true,\r\n      success: true,\r\n    });\r\n  };\r\n\r\n  const handleError = () => {\r\n    setValues({\r\n      ...initialFormValues,\r\n      formSubmitted: true,\r\n      success: false,\r\n    });\r\n  };\r\n\r\n  const formIsValid = (fieldValues = values) => {\r\n    const isValid =\r\n      fieldValues.sceneName && Object.values(errors).every((x) => x === \"\");\r\n\r\n    return isValid;\r\n  };\r\n\r\n  const handleFormSubmit = async (e: any) => {\r\n    e.preventDefault();\r\n    const isValid =\r\n      Object.values(errors).every((x) => x === \"\") && formIsValid();\r\n    if (isValid) {\r\n      await PostContactForm(values, handleSuccess, handleError);\r\n    }\r\n  };\r\n\r\n  return {\r\n    values,\r\n    errors,\r\n    handleInputValue,\r\n    handleFormSubmit,\r\n    formIsValid,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}