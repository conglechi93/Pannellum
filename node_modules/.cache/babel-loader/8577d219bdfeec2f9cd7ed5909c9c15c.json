{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst PostContactForm = async (values, successCallback, errorCallback) => {\n  // do stuff\n  // if successful\n  if (true) successCallback();else errorCallback();\n};\n\n_c = PostContactForm;\nconst initialFormValues = {\n  title: \"\",\n  type: \"\",\n  sname: \"\",\n  formSubmitted: false,\n  success: false\n};\nexport const useFormControls = props => {\n  _s();\n\n  const [values, setValues] = useState(initialFormValues);\n  const [errors, setErrors] = useState({});\n  useEffect(() => {\n    setValues(initialFormValues);\n    setErrors({});\n  }, [props.open]);\n  useEffect(() => {\n    if (props.isInfo === true) {\n      setValues(s => ({ ...s,\n        sname: \" \"\n      }));\n    } else {\n      setValues(s => ({ ...s,\n        sname: \"\"\n      }));\n    }\n  }, [props.isScene, props.isInfo]);\n\n  const validate = function () {\n    let fieldValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : values;\n    let temp = { ...errors\n    };\n    if (\"title\" in fieldValues) temp.title = fieldValues.title ? \"\" : \"This field is required.\";\n    if (\"type\" in fieldValues) temp.type = fieldValues.type ? \"\" : \"This field is required.\";\n    if (\"sname\" in fieldValues) temp.sname = fieldValues.sname ? \"\" : \"This field is required.\";\n    setErrors({ ...temp\n    });\n  };\n\n  const handleInputValue = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n    validate({\n      [name]: value\n    });\n  };\n\n  const handleSuccess = () => {\n    setValues({ ...initialFormValues,\n      formSubmitted: true,\n      success: true\n    });\n  };\n\n  const handleError = () => {\n    setValues({ ...initialFormValues,\n      formSubmitted: true,\n      success: false\n    });\n  };\n\n  const formIsValid = function () {\n    let fieldValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : values;\n    const isValid = fieldValues.title && fieldValues.type && fieldValues.sname && Object.values(errors).every(x => x === \"\");\n    return isValid;\n  };\n\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    const isValid = Object.values(errors).every(x => x === \"\") && formIsValid();\n\n    if (isValid) {\n      await PostContactForm(values, handleSuccess, handleError);\n    }\n  };\n\n  return {\n    values,\n    errors,\n    handleInputValue,\n    handleFormSubmit,\n    formIsValid\n  };\n};\n\n_s(useFormControls, \"66DEkK0tOZd/s6iwEeweQsNSIFI=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PostContactForm\");","map":{"version":3,"sources":["E:/Viettel/View360/pannellum/src/pages/pannellum-view/components/validiations/addInfoValidation.tsx"],"names":["useEffect","useState","PostContactForm","values","successCallback","errorCallback","initialFormValues","title","type","sname","formSubmitted","success","useFormControls","props","setValues","errors","setErrors","open","isInfo","s","isScene","validate","fieldValues","temp","handleInputValue","e","name","value","target","handleSuccess","handleError","formIsValid","isValid","Object","every","x","handleFormSubmit","preventDefault"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,eAAe,GAAG,OACtBC,MADsB,EAEtBC,eAFsB,EAGtBC,aAHsB,KAInB;AACH;AACA;AACA,MAAI,IAAJ,EAAUD,eAAe,GAAzB,KACKC,aAAa;AACnB,CATD;;KAAMH,e;AAWN,MAAMI,iBAAiB,GAAG;AACxBC,EAAAA,KAAK,EAAE,EADiB;AAExBC,EAAAA,IAAI,EAAE,EAFkB;AAGxBC,EAAAA,KAAK,EAAE,EAHiB;AAIxBC,EAAAA,aAAa,EAAE,KAJS;AAKxBC,EAAAA,OAAO,EAAE;AALe,CAA1B;AAQA,OAAO,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACxC,QAAM,CAACV,MAAD,EAASW,SAAT,IAAsBb,QAAQ,CAACK,iBAAD,CAApC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,EAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,SAAS,CAACR,iBAAD,CAAT;AACAU,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD,GAHQ,EAGN,CAACH,KAAK,CAACI,IAAP,CAHM,CAAT;AAKAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,KAAK,CAACK,MAAN,KAAiB,IAArB,EAA2B;AACzBJ,MAAAA,SAAS,CAAEK,CAAD,KAAQ,EAAE,GAAGA,CAAL;AAAQV,QAAAA,KAAK,EAAE;AAAf,OAAR,CAAD,CAAT;AACD,KAFD,MAEO;AACLK,MAAAA,SAAS,CAAEK,CAAD,KAAQ,EAAE,GAAGA,CAAL;AAAQV,QAAAA,KAAK,EAAE;AAAf,OAAR,CAAD,CAAT;AACD;AACF,GANQ,EAMN,CAACI,KAAK,CAACO,OAAP,EAAgBP,KAAK,CAACK,MAAtB,CANM,CAAT;;AAQA,QAAMG,QAAa,GAAG,YAA0B;AAAA,QAAzBC,WAAyB,uEAAXnB,MAAW;AAC9C,QAAIoB,IAAS,GAAG,EAAE,GAAGR;AAAL,KAAhB;AAEA,QAAI,WAAWO,WAAf,EACEC,IAAI,CAAChB,KAAL,GAAae,WAAW,CAACf,KAAZ,GAAoB,EAApB,GAAyB,yBAAtC;AAEF,QAAI,UAAUe,WAAd,EACEC,IAAI,CAACf,IAAL,GAAYc,WAAW,CAACd,IAAZ,GAAmB,EAAnB,GAAwB,yBAApC;AAEF,QAAI,WAAWc,WAAf,EACEC,IAAI,CAACd,KAAL,GAAaa,WAAW,CAACb,KAAZ,GAAoB,EAApB,GAAyB,yBAAtC;AAEFO,IAAAA,SAAS,CAAC,EACR,GAAGO;AADK,KAAD,CAAT;AAGD,GAfD;;AAiBA,QAAMC,gBAAgB,GAAIC,CAAD,IAAY;AACnC,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AACAd,IAAAA,SAAS,CAAC,EACR,GAAGX,MADK;AAER,OAACuB,IAAD,GAAQC;AAFA,KAAD,CAAT;AAIAN,IAAAA,QAAQ,CAAC;AAAE,OAACK,IAAD,GAAQC;AAAV,KAAD,CAAR;AACD,GAPD;;AASA,QAAME,aAAa,GAAG,MAAM;AAC1Bf,IAAAA,SAAS,CAAC,EACR,GAAGR,iBADK;AAERI,MAAAA,aAAa,EAAE,IAFP;AAGRC,MAAAA,OAAO,EAAE;AAHD,KAAD,CAAT;AAKD,GAND;;AAQA,QAAMmB,WAAW,GAAG,MAAM;AACxBhB,IAAAA,SAAS,CAAC,EACR,GAAGR,iBADK;AAERI,MAAAA,aAAa,EAAE,IAFP;AAGRC,MAAAA,OAAO,EAAE;AAHD,KAAD,CAAT;AAKD,GAND;;AAQA,QAAMoB,WAAW,GAAG,YAA0B;AAAA,QAAzBT,WAAyB,uEAAXnB,MAAW;AAC5C,UAAM6B,OAAO,GACXV,WAAW,CAACf,KAAZ,IACAe,WAAW,CAACd,IADZ,IAEAc,WAAW,CAACb,KAFZ,IAGAwB,MAAM,CAAC9B,MAAP,CAAcY,MAAd,EAAsBmB,KAAtB,CAA6BC,CAAD,IAAOA,CAAC,KAAK,EAAzC,CAJF;AAMA,WAAOH,OAAP;AACD,GARD;;AAUA,QAAMI,gBAAgB,GAAG,MAAOX,CAAP,IAAkB;AACzCA,IAAAA,CAAC,CAACY,cAAF;AACA,UAAML,OAAO,GACXC,MAAM,CAAC9B,MAAP,CAAcY,MAAd,EAAsBmB,KAAtB,CAA6BC,CAAD,IAAOA,CAAC,KAAK,EAAzC,KAAgDJ,WAAW,EAD7D;;AAEA,QAAIC,OAAJ,EAAa;AACX,YAAM9B,eAAe,CAACC,MAAD,EAAS0B,aAAT,EAAwBC,WAAxB,CAArB;AACD;AACF,GAPD;;AASA,SAAO;AACL3B,IAAAA,MADK;AAELY,IAAAA,MAFK;AAGLS,IAAAA,gBAHK;AAILY,IAAAA,gBAJK;AAKLL,IAAAA;AALK,GAAP;AAOD,CArFM;;GAAMnB,e","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst PostContactForm = async (\r\n  values: any,\r\n  successCallback: any,\r\n  errorCallback: any\r\n) => {\r\n  // do stuff\r\n  // if successful\r\n  if (true) successCallback();\r\n  else errorCallback();\r\n};\r\n\r\nconst initialFormValues = {\r\n  title: \"\",\r\n  type: \"\",\r\n  sname: \"\",\r\n  formSubmitted: false,\r\n  success: false,\r\n};\r\n\r\nexport const useFormControls = (props) => {\r\n  const [values, setValues] = useState(initialFormValues);\r\n  const [errors, setErrors] = useState({} as any);\r\n\r\n  useEffect(() => {\r\n    setValues(initialFormValues);\r\n    setErrors({});\r\n  }, [props.open]);\r\n\r\n  useEffect(() => {\r\n    if (props.isInfo === true) {\r\n      setValues((s) => ({ ...s, sname: \" \" }));\r\n    } else {\r\n      setValues((s) => ({ ...s, sname: \"\" }));\r\n    }\r\n  }, [props.isScene, props.isInfo]);\r\n\r\n  const validate: any = (fieldValues = values) => {\r\n    let temp: any = { ...errors };\r\n\r\n    if (\"title\" in fieldValues)\r\n      temp.title = fieldValues.title ? \"\" : \"This field is required.\";\r\n\r\n    if (\"type\" in fieldValues)\r\n      temp.type = fieldValues.type ? \"\" : \"This field is required.\";\r\n\r\n    if (\"sname\" in fieldValues)\r\n      temp.sname = fieldValues.sname ? \"\" : \"This field is required.\";\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n  };\r\n\r\n  const handleInputValue = (e: any) => {\r\n    const { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n    validate({ [name]: value });\r\n  };\r\n\r\n  const handleSuccess = () => {\r\n    setValues({\r\n      ...initialFormValues,\r\n      formSubmitted: true,\r\n      success: true,\r\n    });\r\n  };\r\n\r\n  const handleError = () => {\r\n    setValues({\r\n      ...initialFormValues,\r\n      formSubmitted: true,\r\n      success: false,\r\n    });\r\n  };\r\n\r\n  const formIsValid = (fieldValues = values) => {\r\n    const isValid =\r\n      fieldValues.title &&\r\n      fieldValues.type &&\r\n      fieldValues.sname &&\r\n      Object.values(errors).every((x) => x === \"\");\r\n\r\n    return isValid;\r\n  };\r\n\r\n  const handleFormSubmit = async (e: any) => {\r\n    e.preventDefault();\r\n    const isValid =\r\n      Object.values(errors).every((x) => x === \"\") && formIsValid();\r\n    if (isValid) {\r\n      await PostContactForm(values, handleSuccess, handleError);\r\n    }\r\n  };\r\n\r\n  return {\r\n    values,\r\n    errors,\r\n    handleInputValue,\r\n    handleFormSubmit,\r\n    formIsValid,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}